# === –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
import os  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π: –ø—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫, –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –ø—É—Ç—è–º–∏
import torch  # –û—Å–Ω–æ–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ PyTorch –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
import pandas as pd  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ –≤ .csv/.xlsx
import matplotlib.pyplot as plt  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import seaborn as sns  # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ matplotlib: —Å—Ç–∏–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–ø–ª–æ–≤—ã—Ö –∫–∞—Ä—Ç
from sklearn.metrics import classification_report, confusion_matrix, precision_recall_fscore_support, \
    top_k_accuracy_score  # –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
from sklearn.manifold import TSNE  # –ú–µ—Ç–æ–¥ t-SNE –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
import numpy as np  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –∏ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –º–∞—Å—Å–∏–≤—ã –∏ –º–∞—Ç—Ä–∏—Ü—ã

# –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from model import get_model  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∏
from dataloader import get_dataloaders  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—É—á–∞—é—â–µ–π, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏

# –°–æ–∑–¥–∞—ë—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
os.makedirs("results", exist_ok=True)


# === –§—É–Ω–∫—Ü–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è TTA (Test-Time Augmentation) ===
def apply_tta(imgs):
    from torchvision.transforms.functional import rotate  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–∑ torchvision

    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    tta_imgs = [imgs]

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–∑–µ—Ä–∫–∞–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Å–∏: —à–∏—Ä–∏–Ω–∞)
    tta_imgs.append(torch.flip(imgs, dims=[3]))  # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ª–µ–≤—É—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∞–≤—É—é –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–µ –Ω–∞ 90¬∞ –∏ 180¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
    tta_imgs.append(rotate(imgs, angle=90))
    tta_imgs.append(rotate(imgs, angle=180))

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —á–µ—Ç—ã—Ä—å–º—è –≤–µ—Ä—Å–∏—è–º–∏ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –±–∞—Ç—á–∞
    return tta_imgs


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def evaluate(features, arc_head, dataloader, device, class_names):
    features.eval()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º feature-—ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏ (–æ—Ç–∫–ª—é—á–∞—é—Ç—Å—è Dropout, BatchNorm —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω–∞—á–µ)
    arc_head.eval()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º ArcFace –≥–æ–ª–æ–≤—É –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏
    all_preds = []  # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    all_probs = []  # –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    all_targets = []  # –ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –º–µ—Ç–∫–∏ (ground truth)
    embeddings = []  # –°–ø–∏—Å–æ–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ feature extractor

    with torch.no_grad():  # –û—Ç–∫–ª—é—á–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        for imgs, lbls in dataloader:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –±–∞—Ç—á–∞–º –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞–ª–æ–∞–¥–µ—Ä–∞
            imgs = imgs.to(device)  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (GPU –∏–ª–∏ CPU)
            tta_imgs = apply_tta(imgs)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTA –≤–µ—Ä—Å–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            probs_sum = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –ø–æ TTA
            feats_all = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–Ω–∞ –∫–∞–∂–¥—É—é TTA-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)

            for tta in tta_imgs:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π TTA-–≤–µ—Ä—Å–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                feats = features(tta).view(tta.size(0), -1)  # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (–≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤) –∏ –≤—ã–ø—Ä—è–º–ª—è–µ–º
                outputs = arc_head(feats)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä ArcFace (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏—Ç—ã)
                probs = torch.softmax(outputs, dim=1)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ª–æ–≥–∏—Ç—ã –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Softmax
                probs_sum += probs  # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ TTA, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É—Å—Ä–µ–¥–Ω–∏—Ç—å
                feats_all.append(feats)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏

            # –£—Å—Ä–µ–¥–Ω—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º TTA
            avg_probs = probs_sum / len(tta_imgs)
            # –£—Å—Ä–µ–¥–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–æ –≤—Å–µ–º TTA-–≤–µ—Ä—Å–∏—è–º
            avg_feats = torch.stack(feats_all).mean(dim=0)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–ª–∞—Å—Å–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            preds = avg_probs.argmax(dim=1).cpu()

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –º–µ—Ç–∫–∏ –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
            all_preds.extend(preds.tolist())
            all_probs.append(avg_probs.cpu())
            all_targets.extend(lbls.tolist())
            embeddings.append(avg_feats.cpu())

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞—Ç—á–∏ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π —Ç–µ–Ω–∑–æ—Ä/–º–∞—Å—Å–∏–≤
    probs_tensor = torch.cat(all_probs, dim=0)
    emb_tensor = torch.cat(embeddings, dim=0)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç: precision, recall, f1-score –∏ accuracy –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É
    report = classification_report(all_targets, all_preds, target_names=class_names, output_dict=True)
    # –ü–æ–ª—É—á–∞–µ–º confusion matrix: —Å–∫–æ–ª—å–∫–æ –∏ –∫–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã –º–æ–¥–µ–ª—å —Å–ø—É—Ç–∞–ª–∞
    matrix = confusion_matrix(all_targets, all_preds)
    # –í—ã—á–∏—Å–ª—è–µ–º top-3 accuracy ‚Äî –Ω–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –≤—Ö–æ–¥–∏–ª –≤ —Ç—Ä–æ–π–∫—É –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö
    top3_acc = top_k_accuracy_score(all_targets, probs_tensor.numpy(), k=3)

    print("\n=== Classification Report ===")
    print(classification_report(all_targets, all_preds, target_names=class_names))
    print(f"Top-3 Accuracy: {top3_acc:.4f}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É –≤ .csv –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    precision, recall, f1, _ = precision_recall_fscore_support(all_targets, all_preds, average=None)
    metrics_df = pd.DataFrame({
        "Class": class_names,
        "Precision": precision,
        "Recall": recall,
        "F1-Score": f1
    })
    metrics_df.to_csv("results/detailed_metrics_arcface.csv", index=False)
    print("üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ results/detailed_metrics_arcface.csv")

    return report, matrix, emb_tensor.numpy(), np.array(all_targets), top3_acc


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ confusion matrix –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è) ===
def save_confusion_matrix(matrix, class_names, model_name):
    plt.figure(figsize=(10, 8))  # –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
    sns.heatmap(matrix, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
    plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ')
    plt.ylabel('–ò—Å—Ç–∏–Ω–Ω–æ')
    plt.title(f'–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫: {model_name}')
    plt.tight_layout()
    plt.savefig(f'results/confusion_matrix_{model_name}_arcface.png')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    plt.close()


# === –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ .csv —Ñ–æ—Ä–º–∞—Ç–µ ===
def save_classification_report(report, model_name):
    df = pd.DataFrame(report).transpose()
    df.to_csv(f'results/classification_report_{model_name}_arcface.csv', index=True)
    return df


# === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ t-SNE –ø—Ä–æ–µ–∫—Ü–∏–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –º–æ–¥–µ–ª–∏ ===
def plot_tsne(embeddings, targets, class_names, model_name):
    print("üîç –°—Ç—Ä–æ–∏–º t-SNE...")
    tsne = TSNE(n_components=2, perplexity=30, random_state=42)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è t-SNE
    reduced = tsne.fit_transform(embeddings)  # –ü–æ–Ω–∏–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–æ 2D
    df = pd.DataFrame(reduced, columns=['x', 'y'])  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫
    df['label'] = [class_names[i] for i in targets]  # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –∫–ª–∞—Å—Å–∞–º–∏

    plt.figure(figsize=(10, 8))
    sns.scatterplot(data=df, x='x', y='y', hue='label', palette='tab10', s=60)
    plt.title(f"t-SNE –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {model_name} (ArcFace)")
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    plt.savefig(f"results/tsne_{model_name}_arcface.png")
    plt.close()


# === –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é (resnet50, efficientnet_b0, swin_tiny) ===
def evaluate_model(model_name):
    dataset_dir = "dataset_10classes"
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    _, _, test_loader, _ = get_dataloaders(dataset_dir=dataset_dir, model_name=model_name)
    class_names = sorted(os.listdir(os.path.join(dataset_dir, 'test')))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä ArcFace
    features, arc_head, _ = get_model(model_name, arcface=True)
    checkpoint = torch.load(f'models/{model_name}_arcface.pth', map_location=device)
    features.load_state_dict(checkpoint['features_state'])
    arc_head.load_state_dict(checkpoint['arc_head_state'])
    features.to(device)
    arc_head.to(device)

    # –ü—Ä–æ–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫—É –º–æ–¥–µ–ª–∏: –º–µ—Ç—Ä–∏–∫–∏, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    report, matrix, embeddings, targets, top3_acc = evaluate(features, arc_head, test_loader, device, class_names)
    save_confusion_matrix(matrix, class_names, model_name)
    df = save_classification_report(report, model_name)

    # –î–æ–±–∞–≤–ª—è–µ–º Top-3 Accuracy –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
    df.loc["top3_accuracy"] = [None] * (df.shape[1] - 1) + [top3_acc]
    plot_tsne(embeddings, targets, class_names, model_name)

    # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π F1 —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞—Å—Ç–æ—è—â–∏–º –∫–ª–∞—Å—Å–∞–º (–±–µ–∑ accuracy –∏ avg)
    class_rows = [k for k in report.keys() if k not in ['accuracy', 'macro avg', 'weighted avg']]
    avg_f1 = df.loc[class_rows, 'f1-score'].mean().item()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Excel
    df.to_excel(f"results/classification_per_class_{model_name}_arcface.xlsx", index=True)
    return avg_f1


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ø–æ F1 –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ===
def save_f1_summary(f1_scores):
    summary_df = pd.DataFrame.from_dict(f1_scores, orient='index', columns=['avg_f1'])
    summary_df.to_excel("results/model_comparison_summary_arcface.xlsx")

    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    data = summary_df.reset_index().rename(columns={"index": "Model"})
    plt.figure(figsize=(10, 6))
    ax = sns.barplot(data=data, x="Model", y="avg_f1", palette='viridis', hue="Model", dodge=False, legend=False)

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É –∑–Ω–∞—á–µ–Ω–∏–µ–º F1
    for bar in ax.patches:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, height + 0.01, f"{height:.3f}", ha='center', va='bottom',
                fontsize=10, fontweight='bold')

    plt.ylabel("–°—Ä–µ–¥–Ω–∏–π F1-Score")
    plt.xlabel("–ú–æ–¥–µ–ª—å")
    plt.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ F1 (ArcFace)", weight='bold')
    plt.ylim(0, 1)
    plt.tight_layout()
    plt.savefig("results/f1_score_comparison_arcface.png")
    plt.show()


# === –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é ===
if __name__ == "__main__":
    models = ["resnet50", "efficientnet_b0", "swin_tiny"]  # –ü–µ—Ä–µ—á–µ–Ω—å –º–æ–¥–µ–ª–µ–π
    f1_scores = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ F1 –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏

    for model_name in models:
        print(f"\n\ud83d\udd0d –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏: {model_name}")
        avg_f1 = evaluate_model(model_name)
        f1_scores[model_name] = avg_f1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    save_f1_summary(f1_scores)
