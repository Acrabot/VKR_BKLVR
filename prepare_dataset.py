# –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os  # —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import shutil  # –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫
import pandas as pd  # —Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ (DataFrame)
import numpy as np  # —Ä–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ —á–∏—Å–µ–ª
from PIL import Image  # —Ä–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (Pillow)
import cv2  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ OpenCV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import ast  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫ –≤ Python-–æ–±—ä–µ–∫—Ç—ã
from sklearn.model_selection import train_test_split  # —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ train/val/test
from unidecode import unidecode  # –ø–µ—Ä–µ–≤–æ–¥ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
from collections import defaultdict  # —Å–ª–æ–≤–∞—Ä—å —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
from datetime import datetime  # –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
from tqdm import tqdm  # –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –≤ —Ü–∏–∫–ª–∞—Ö

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# –ü—É—Ç–∏ –∫ CSV-—Ñ–∞–π–ª–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
MINERALS_10_PATH = "minerals_10.csv"
MINERALS_FULL_PATH = "minerals_full.csv"
# –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω–µ—Ä–∞–ª–æ–≤
ROOT_IMAGE_DIR = "C:/Users/KROL/PycharmProjects/CLASS10/Minerals_2023/mineral_images"
# –ö—É–¥–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
SPLIT_OUTPUT_DIR = "dataset_10classes"
# –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –æ–±—É—á–∞—é—â—É—é, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
SPLIT_RATIOS = (0.7, 0.2, 0.1)
RANDOM_STATE = 42  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
MIN_SIZE = 256  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ —à–∏—Ä–∏–Ω–µ/–≤—ã—Å–æ—Ç–µ
MARGIN_PERCENT = 0.1  # –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ (bbox)
CONTRAST_STD_THRESHOLD = 60.0  # –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
BLUR_THRESHOLD = 50.0  # –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–∏
MIN_AREA_RATIO = 0.25  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–∞–¥—Ä–µ
MIN_SIDE_RATIO = 0.35  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω bbox

# === –õ–û–ì–ò ===
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)  # —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤
LOG_PATH = os.path.join(LOG_DIR, "dataset_preparation.log")  # –ª–æ–≥-—Ñ–∞–π–ª —Å–æ–±—ã—Ç–∏–π
CSV_PATH = os.path.join(LOG_DIR, "removed_images.csv")  # —Ñ–∞–π–ª —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
SUMMARY_PATH = os.path.join(LOG_DIR, "summary.txt")  # –∏—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞

# –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–ø–∏—Å–æ–∫
log_lines = []
removed_records = []  # —Å—é–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
summary_stats = defaultdict(lambda: {'total': 0, 'saved': 0, 'removed': 0})  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±–æ—Ä–∫–µ
reason_stats = defaultdict(int)  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º —É–¥–∞–ª–µ–Ω–∏—è

# –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
def log(msg):
    log_lines.append(f"{datetime.now().strftime('%H:%M:%S')} {msg}")

# –§–∏–∫—Å–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã
def record_removal(path, split, cls, reason):
    removed_records.append({
        'path': path, 'split': split, 'class': cls, 'reason': reason
    })
    reason_stats[reason] += 1

# === –§–£–ù–ö–¶–ò–ò ===
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞ –ø–æ –∫—Ä–∞—è–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ñ–æ–Ω –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
def get_background_color(pil_img):
    img = np.array(pil_img)
    h, w = img.shape[:2]
    top = img[:20, :, :] if h >= 20 else img[:h//2, :, :]
    bottom = img[-20:, :, :] if h >= 20 else img[h//2:, :, :]
    left = img[:, :20, :] if w >= 20 else img[:, :w//2, :]
    right = img[:, -20:, :] if w >= 20 else img[:, w//2:, :]
    edge_px = np.concatenate([top.reshape(-1, 3), bottom.reshape(-1, 3),
                              left.reshape(-1, 3), right.reshape(-1, 3)], axis=0)
    return tuple(np.median(edge_px, axis=0).astype(np.uint8).tolist())

# –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ MIN_SIZE —Å —Ñ–æ–Ω–æ–º, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º –ø–æ –∫—Ä–∞—é
def ensure_min_size(pil_img):
    w, h = pil_img.size
    if w >= MIN_SIZE and h >= MIN_SIZE:
        return pil_img
    new_w = max(w, MIN_SIZE)
    new_h = max(h, MIN_SIZE)
    bg_color = get_background_color(pil_img)
    canvas = Image.new("RGB", (new_w, new_h), bg_color)
    canvas.paste(pil_img, ((new_w - w) // 2, (new_h - h) // 2))
    return canvas

# –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é CLAHE, –µ—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–ª–µ–∫–ª–æ–µ
def apply_clahe_if_needed(pil_img):
    img_np = np.array(pil_img)
    if img_np.size == 0:
        return pil_img
    gray = cv2.cvtColor(img_np, cv2.COLOR_RGB2GRAY)
    if np.std(gray) >= CONTRAST_STD_THRESHOLD:
        return pil_img  # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–µ
    lab = cv2.cvtColor(img_np, cv2.COLOR_RGB2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    cl = clahe.apply(l)
    merged = cv2.merge((cl, a, b))
    return Image.fromarray(cv2.cvtColor(merged, cv2.COLOR_LAB2RGB))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –ª–∞–ø–ª–∞—Å–∏–∞–Ω–∞ (–º–µ—Ç–æ–¥ OpenCV)
def is_blurry(pil_img):
    gray = cv2.cvtColor(np.array(pil_img), cv2.COLOR_RGB2GRAY)
    return cv2.Laplacian(gray, cv2.CV_64F).var() < BLUR_THRESHOLD

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å bbox –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
# –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–ª–µ–≥–∫–∞ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–∫—Ç–∞
# –¢–∞–∫–∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

def expand_box(box, img_w, img_h):
    x0, y0, x1, y1 = box
    w, h = x1 - x0, y1 - y0
    dx, dy = int(w * MARGIN_PERCENT), int(h * MARGIN_PERCENT)
    return (
        max(0, x0 - dx),
        max(0, y0 - dy),
        min(img_w, x1 + dx),
        min(img_h, y1 + dy)
    )

# –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bbox, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ (x0,y0,x1,y1), –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞–æ–±–æ—Ä–æ—Ç
def normalize_box(box):
    x0, y0, x1, y1 = box
    return [min(x0, x1), min(y0, y1), max(x0, x1), max(y0, y1)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è IOU (–ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è) –¥–≤—É—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ ‚Äî –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–ª–∏–∑–∫–∏—Ö –±–æ–∫—Å–æ–≤
def iou(boxA, boxB):
    xA = max(boxA[0], boxB[0])
    yA = max(boxA[1], boxB[1])
    xB = min(boxA[2], boxB[2])
    yB = min(boxA[3], boxB[3])
    interArea = max(0, xB - xA) * max(0, yB - yA)
    if interArea == 0:
        return 0.0
    boxAArea = (boxA[2] - boxA[0]) * (boxA[3] - boxA[1])
    boxBArea = (boxB[2] - boxB[0]) * (boxB[3] - boxB[1])
    return interArea / float(boxAArea + boxBArea - interArea)

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –±–æ–∫—Å–∞ –≤ –æ–¥–∏–Ω, –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
def merge_boxes(b1, b2):
    return {
        "label": b1.get("label", "") or b2.get("label", ""),
        "confidence": max(b1.get("confidence", 0), b2.get("confidence", 0)),
        "box": normalize_box([
            min(b1["box"][0], b2["box"][0]),
            min(b1["box"][1], b2["box"][1]),
            max(b1["box"][2], b2["box"][2]),
            max(b1["box"][3], b2["box"][3]),
        ])
    }

# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã bbox —Å –≤—ã—Å–æ–∫–∏–º IOU –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
def deduplicate_boxes(boxes, iou_threshold=0.5):
    merged = []
    used = set()
    for i, b1 in enumerate(boxes):
        if i in used:
            continue
        box1 = normalize_box(b1["box"])
        for j in range(i + 1, len(boxes)):
            if j in used:
                continue
            box2 = normalize_box(boxes[j]["box"])
            if iou(box1, box2) > iou_threshold:
                b1 = merge_boxes(b1, boxes[j])
                used.add(j)
                box1 = normalize_box(b1["box"])
        merged.append(b1)
    return merged

# === –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –î–ê–ù–ù–´–• ===
# –ï—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º, —É–¥–∞–ª—è–µ–º –µ—ë, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
if os.path.exists(SPLIT_OUTPUT_DIR):
    log(f"[üßπ] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {SPLIT_OUTPUT_DIR}")
    shutil.rmtree(SPLIT_OUTPUT_DIR)
os.makedirs(SPLIT_OUTPUT_DIR, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –∑–∞–Ω–æ–≤–æ

# === –ó–ê–ì–†–£–ó–ö–ê CSV ===
# –ó–∞–≥—Ä—É–∂–∞–µ–º 2 —Ç–∞–±–ª–∏—Ü—ã: –ø–µ—Ä–≤–∞—è ‚Äî –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ id (10 –∫–ª–∞—Å—Å–æ–≤), –≤—Ç–æ—Ä–∞—è ‚Äî –ø–æ–ª–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
# –ó–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –ø–æ id

df_10 = pd.read_csv(MINERALS_10_PATH)  # –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ id (–ø–æ 10 –∫–ª–∞—Å—Å–∞–º)
df_full = pd.read_csv(MINERALS_FULL_PATH)  # –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–∞ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –ø–æ id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –º–µ—Ç–∫—É
# path_y ‚Äî –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, ru_name ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–Ω–µ—Ä–∞–ª–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
df = df_10.merge(df_full, on="id")
df = df[["id", "path_y", "ru_name"]].rename(columns={"path_y": "image_path", "ru_name": "label"})

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–∞–ø–æ–∫)
df["label_en"] = df["label"].apply(lambda x: unidecode(str(x).strip()).replace(" ", "_"))

# === –†–ê–ó–ë–ò–í–ê–ï–ú –ù–ê TRAIN / VAL / TEST ===
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–∞–º
train_df, temp_df = train_test_split(
    df,
    stratify=df['label_en'],
    test_size=1 - SPLIT_RATIOS[0],
    random_state=RANDOM_STATE
)
val_df, test_df = train_test_split(
    temp_df,
    stratify=temp_df['label_en'],
    test_size=SPLIT_RATIOS[2] / (SPLIT_RATIOS[1] + SPLIT_RATIOS[2]),
    random_state=RANDOM_STATE
)
splits = {"train": train_df, "val": val_df, "test": test_df}  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å

# === –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ò –û–ë–†–ê–ë–û–¢–ö–ê ===
# –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–µ (train/val/test), —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,
# –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å bbox, –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞

for split_name, split_df in splits.items():
    log(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∫–∏: {split_name}, {len(split_df)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---")
    for _, row in tqdm(split_df.iterrows(), total=len(split_df), desc=f"{split_name}", ncols=80):

        label = row["label_en"]
        src = os.path.join(ROOT_IMAGE_DIR, row["image_path"])  # –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        dst_dir = os.path.join(SPLIT_OUTPUT_DIR, split_name, label)  # –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        os.makedirs(dst_dir, exist_ok=True)
        dst = os.path.join(dst_dir, os.path.basename(row["image_path"]))  # –ø—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞

        summary_stats[(split_name, label)]['total'] += 1  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        try:
            shutil.copy2(src, dst)  # –∫–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        except Exception as e:
            log(f"[ERR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {src} ‚Üí {e}")
            record_removal(src, split_name, label, "–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            continue

        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        row_full = df_full[df_full["path"].str.endswith(os.path.basename(row["image_path"]))].head(1)
        if row_full.empty:
            log(f"[DEL] –ù–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ CSV: {dst}")
            os.remove(dst)
            record_removal(dst, split_name, label, "–Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ CSV")
            continue

        row_data = row_full.iloc[0]  # –±–µ—Ä—ë–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if pd.isna(row_data.get("mineral_boxes", None)):
            log(f"[DEL] –ù–µ—Ç box'–æ–≤: {dst}")
            os.remove(dst)
            record_removal(dst, split_name, label, "–Ω–µ—Ç box'–æ–≤")
            continue

        try:
            boxes = deduplicate_boxes(ast.literal_eval(row_data["mineral_boxes"]))
        except:
            log(f"[DEL] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ box'–æ–≤: {dst}")
            os.remove(dst)
            record_removal(dst, split_name, label, "–æ—à–∏–±–∫–∞ –≤ box'–∞—Ö")
            continue

        try:
            img = Image.open(dst).convert("RGB")
        except:
            log(f"[DEL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dst}")
            os.remove(dst)
            record_removal(dst, split_name, label, "–Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            continue

        W, H = img.size  # —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        base_name = os.path.splitext(os.path.basename(dst))[0]  # –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        saved = False  # —Ñ–ª–∞–≥, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω crop

        for idx, b in enumerate(boxes):
            if "box" not in b or len(b["box"]) != 4:
                continue

            # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π
            x0 = int(b["box"][0] * W)
            y0 = int(b["box"][1] * H)
            x1 = int(b["box"][2] * W)
            y1 = int(b["box"][3] * H)
            w, h = x1 - x0, y1 - y0
            area = (w * h) / (W * H)

            # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã (–ø–æ –ø–ª–æ—â–∞–¥–∏ –∏ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º)
            if area < MIN_AREA_RATIO and w < MIN_SIDE_RATIO * W and h < MIN_SIDE_RATIO * H:
                continue

            # –†–∞—Å—à–∏—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –∏ –≤—ã—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            x0, y0, x1, y1 = expand_box((x0, y0, x1, y1), W, H)
            crop = img.crop((x0, y0, x1, y1))
            crop = apply_clahe_if_needed(crop)  # –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

            if is_blurry(crop):  # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–∏
                continue

            crop = ensure_min_size(crop)  # –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            out_path = os.path.join(dst_dir, f"{base_name}_crop{idx}.jpg")  # –∏–º—è —Ñ–∞–π–ª–∞
            crop.save(out_path)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π crop
            log(f"[OK] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {out_path}")
            summary_stats[(split_name, label)]['saved'] += 1
            saved = True

            os.remove(dst)  # —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª (–º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –≤—ã—Ä–µ–∑–∫–∏)
            log(f"[DEL] –£–¥–∞–ª–µ–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dst}")
            if not saved:
                record_removal(dst, split_name, label, "–Ω–∏ –æ–¥–∏–Ω crop –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

    # === –°–û–•–†–ê–ù–ï–ù–ò–ï –õ–û–ì–û–í ===
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
    with open(LOG_PATH, "w", encoding="utf-8") as f:
        f.write("\n".join(log_lines))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
    pd.DataFrame(removed_records).to_csv(CSV_PATH, index=False, encoding="utf-8")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    with open(SUMMARY_PATH, "w", encoding="utf-8") as f:
        # === –†–∞–∑–¥–µ–ª 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±–æ—Ä–∫–∞–º –∏ –∫–ª–∞—Å—Å–∞–º
        total_all = 0
        split_class_counts = defaultdict(lambda: defaultdict(int))

        for (split, cls), stat in sorted(summary_stats.items()):
            split_class_counts[split][cls] += stat['saved']
            total_all += stat['saved']

        for split in ["train", "val", "test"]:
            split_name = split.upper()
            split_total = sum(split_class_counts[split].values())
            f.write(f"üìÅ {split_name} ‚Äî {split_total} images\n")
            for cls in sorted(split_class_counts[split]):
                f.write(f"  {cls}: {split_class_counts[split][cls]}\n")
            f.write("\n")

        f.write(f"üìä TOTAL: {total_all} images in all splits\n\n")

        # === –†–∞–∑–¥–µ–ª 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é/—É–¥–∞–ª–µ–Ω–∏—é
        f.write("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–¢–ï–†–¨ –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø:\n\n")
        f.write(f"{'| Split':<8}| {'Class':<12}| {'Total':>5} | {'Saved':>5} | {'Lost':>4} | {'Saved %':>7} |\n")
        f.write("|" + "-" * 7 + "|" + "-" * 13 + "|" + "-" * 7 + "|" + "-" * 7 + "|" + "-" * 6 + "|" + "-" * 9 + "|\n")
        for (split, cls), stat in sorted(summary_stats.items()):
            total = stat['total']
            saved = stat['saved']
            lost = total - saved
            perc = 100 * saved / total if total else 0
            f.write(f"| {split:<6}| {cls:<12}| {total:>5} | {saved:>5} | {lost:>4} | {perc:>6.1f}% |\n")
        f.write("\n")

        # === –†–∞–∑–¥–µ–ª 3: –ü–æ–¥—Å—á—ë—Ç –ø—Ä–∏—á–∏–Ω —É–¥–∞–ª–µ–Ω–∏—è
        f.write("üóëÔ∏è –ü–†–ò–ß–ò–ù–´ –£–î–ê–õ–ï–ù–ò–Ø:\n")
        for reason, count in sorted(reason_stats.items(), key=lambda x: -x[1]):
            f.write(f"{reason}: {count} —Ñ–∞–π–ª–æ–≤\n")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
    doc_log = "[‚úî] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ–æ–≥–∏ –∏ –æ—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    log(doc_log)
    print(doc_log)



